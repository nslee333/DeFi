import Head from 'next/head'
import Image from 'next/image'
import styles from '../styles/Home.module.css'
import { ethers, providers, getNetwork } from "ethers";
import Web3Modal from "web3modal";
import React, { useEffect, useState, useRef } from 'react';
import { CONTRACT_ADDRESS, CONTRACT_ABI } from "../constants.js" 


export  default function Home() {

  const [walletConnected, setWalletConnected] = useState(false);
  const web3ModalRef = useRef();

  const connectWallet = async () => {
    try {
      await getProviderOrSigner();
      setWalletConnected(true);
    } catch (error) {
      console.error(error);
    }
  }
  
  const getProviderOrSigner = async (needSigner = false) => {
    const provider = await web3ModalRef.current.connect();
    const web3Provider = new providers.Web3Provider(provider);

    const { chainId } = await web3Provider.getNetwork();
    if (chainId !== 5) {
      window.alert("Change the network to Goerli");
      throw new Error("Change the network to Goerli");
    }

    if (needSigner) {
      const signer = web3Provider.getSigner();
      return signer;
    }
    return web3Provider;
  }

  useEffect(() => {
    if (!walletConnected) {
      connectWallet();
      web3ModalRef.current = new Web3Modal({
        network: "goerli",
        providerOptions: {},
        disableInjectedProvider: false,
      });
      

    }
  }, [walletConnected]);


  
  const contractInstance = async (needSigner = false) => {

    let providerInstance = await getProviderOrSigner();
    let signerInstance = await getProviderOrSigner(true);

    if (needSigner) {
      let signerInstance = new ethers.Contract(
        CONTRACT_ADDRESS,
        CONTRACT_ABI,
        signerInstance,
      )
      return signerInstance;
    } else {
      let providerInstance = new ethers.Contract(
        CONTRACT_ADDRESS,
        CONTRACT_ABI,
        providerInstance,
      )
      return providerInstance;
    }
  };


  console.log(contractInstance(true), "HI");

  const mintTokens = async () => {};



  const viewPropertiesOfContract = async () => {

    let instance = await contractInstance();

    let tx = await instance.name();
    await tx.wait();
    console.log(tx);

    tx = await instance.symbol();
    await tx.wait();
    console.log(tx);

    tx = await instance.decimals();
    await tx.wait();
    console.log(tx);

    tx = await instance.totalSupply();
    await tx.wait();
    console.log(tx);



  };

  const propertyCall = async () => {
    let result = await viewPropertiesOfContract();
    return result;
  }




  const renderButton = () => {
   
        if(!walletConnected) {
          return (
            <div className={styles.container}>
            <button onClick={connectWallet}>Connect Wallet</button> 
            </div>
          )
        }

        if(walletConnected) {
          return (
            <div>
            <button className={styles.button}>Mint Tokens</button>
            <button className={styles.button} onClick={propertyCall}>See Props</button>
            <button className={styles.button}>Test 3</button>
            <button className={styles.button}>Test 4</button>
          </div>
          )

        }
        

  }




  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <h1 className={styles.title}>
          Testing App
        </h1>
        {renderButton()}
      </main>

      <footer className={styles.footer}>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          Powered by{' '}
          <span className={styles.logo}>
            <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
          </span>
        </a>
      </footer>
    </div>
  )
}
